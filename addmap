#!/usr/bin/perl
#
# Download and install Alien Arena maps
#


my $DOWNLOADCOMMAND = "/usr/bin/wget";
my $ZIPLISTCMD = "/usr/bin/unzip -l";
my $ZIPEXTRACTCMD = "/usr/bin/unzip";
my $HOMEDIR = $ENV{HOME};
my $PREFFILE = "$HOMEDIR/.addmaprc";
my $MAP_PATH = "";
my $MAPS_LIST = "";

# No changes below here

my $VERSION = "0.1";
my $NumArgs = $#ARGV + 1;
my @MapNames = ();
my @OrigMaps = ();
my $FH = "";

print "addmap v$VERSION\n";
print "=============\n";
if ($NumArgs != 1)
{
	print "Usage:\n addmap \<URL TO MAP\>\n";
	exit 0;
}
my $MapUrl = $ARGV[0];
print "Map URL: $MapUrl\n";

if (substr($MapUrl, 0, 4) ne "http")
{
	print "$MapUrl doesn't seem to be a URL\n";
	exit 0;
}

if (! -f $PREFFILE)
{
	print "Prefs not found, creating.\n";
	print "What is the path to the Alien Arena folder: ";
	$MAP_PATH = <stdin>;
	chop($MAP_PATH);
	print "Map Path = '$MAP_PATH'\n";
	open($FH, '>', $PREFFILE) or die "Could not create file '$PREFFILE' $!";
	print $FH "$MAP_PATH\n";
	close ($FH);
}
else
{
        open($FH, '<', $PREFFILE) or die "Could not open file '$PREFFILE' $!";
	while (<$FH>)
	{
		chop();
		$MAP_PATH = $_;
	}
        print "Map Path = $MAP_PATH\n";
        close ($FH);
}

if (substr($MapUrl, -4) ne ".zip")
{
	print "That file doesn't seem to be a zip file: $MapUrl\n";
	exit 0;
}

# Change to alien arena folder
chdir($MAP_PATH);

# Download the map file
system("$DOWNLOADCOMMAND \"$MapUrl\"");
# Get the standalone zip file
my $SlashPos = rindex($MapUrl, "/") + 1;
my $MapFile = substr($MapUrl, $SlashPos);
print "MapFile = $MapFile\n";

my $NumMaps = 0;
my @ziplistlines = `$ZIPLISTCMD $MapFile | grep arena/maps | grep \.bsp`;
while(@ziplistlines)
{
	my $FileLine = shift @ziplistlines;
	chop($FileLine);
	#print "Saw line '$FileLine'\n";
	$SlashPos = rindex($FileLine, "/") + 1;
	my $MapName = substr($FileLine, $SlashPos);
	$MapName = substr($MapName, 0, length($MapName) - 4);
	print "Saw Map Name: $MapName\n";
	push(@MapNames, $MapName);
	$NumMaps++;
}
print "Saw $NumMaps maps in archive\n";

if ($NumMaps == 0)
{
	print "No maps found in archive - aborting\n";
	exit 0;
}
# Extract the files
system("$ZIPEXTRACTCMD $MapFile");
print "Maps Extracted\n";

my $MAPLISTFILE = "$MAP_PATH/arena/maps.lst";
open($FH, '<', $MAPLISTFILE) or die "Could not open file '$MAPLISTFILE' for reading $!";
while(<$FH>)
{
	chop();
	my $EndChar = substr($_, -1);
	if ($EndChar eq "\r")
	{
		chop($_);
	}

	if ($_ ne "0")
	{
		push(@OrigMaps, $_);
	}
}
close ($FH);

open($FH, '>', "$MAPLISTFILE-new") or die "Could not create file '$MAPLISTFILE-new' $!";
foreach (@OrigMaps)
{
	print $FH "$_\n";
}
my @EditedList = ();
foreach (@MapNames)
{
	my $CurMap = $_;
	if (grep(/$CurMap/, @OrigMaps))
	{
		print "Already had map $CurMap installed - skipping\n";
		next;
	}
	print $FH "$CurMap \"$CurMap\"\n";
	push(@EditedList, $CurMap);
}
print $FH "0\n";
close ($FH);

system("mv $MAPLISTFILE-new $MAPLISTFILE");

my $SERVERCONFIGFILE = "$MAP_PATH/arena/server.cfg";
my $maplist = "";
open($FH, '<', $SERVERCONFIGFILE) or die "Could not open file '$SERVERCONFIGFILE' for reading $!";
open($FH2, '>', "$SERVERCONFIGFILE-new") or die "Could not create file '$SERVERCONFIGFILE-new' $!";
while(<$FH>)
{
	chop();
	my $EndChar = substr($_, -1);
	if ($EndChar eq "\r")
	{
		chop($_);
	}

	if (substr($_, 0, 14) ne "set sv_maplist")
	{
		print $FH2 "$_\n";
		next;
	}
	# print "Saw maplist line\n";
	$maplist = $_;
	chop ($maplist);
	foreach (@EditedList)
	{
		$maplist = "$maplist $_";
	}
	$maplist = "$maplist\"";
	print $FH2 "$maplist\n";
}
# print "maplist: $maplist\n";
close ($FH);
close ($FH2);

# Overwrite the previous config
system("mv $SERVERCONFIGFILE-new $SERVERCONFIGFILE");

exit 0;
